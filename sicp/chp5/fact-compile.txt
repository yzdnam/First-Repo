;; construct the procedure and skip over code for the proc body
(assign val (op make-compiled-procedure) (label entry1) (reg env))
  (goto (label after-lambda2))
  ; calls to factorial will enter here
  entry1 
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (n)) (reg argl) (reg env))
  ;; begin actual procedure body
  (save continue)
  (save env)
  ;; compute (= n 1)
  (assign proc (op lookup-variable-value) (const =) (reg env))
  (assign val (const 1))
  (assign argl (op list) (reg val))
  (assign val (op lookup-variable-value) (const n) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch6))
  compiled-branch7
  (assign continue (label after-call8))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
  primitive-branch6
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  ; val now contains result of (= n 1)
  after-call8 
  (restore env)
  (restore continue)
  ;; compilation of if statement
  (test (op false?) (reg val))
  (branch (label false-branch4))
  ; return 1
  true-branch3 
  (assign val (const 1))
  (goto (reg continue))
  ;; compute and return (* (factorial (- n 1)) n)
  false-branch4 
  (assign proc (op lookup-variable-value) (const *) (reg env))
  (save continue)
  ; save * procedure
  (save proc)
  (assign val (op lookup-variable-value) (const n) (reg env))
  (assign argl (op list) (reg val))
  ; save partial argument list for *
  (save argl)
  ;; compute (factorial (- n 1)), which is the other arg for *
  (assign proc (op lookup-variable-value) (const factorial) (reg env))
  ; save factorial procedure
  (save proc)
  ;; compute (- n 1), which is the argument for factorial
  (assign proc (op lookup-variable-value) (const -) (reg env))
  (assign val (const 1))
  (assign argl (op list) (reg val))
  (assign val (op lookup-variable-value) (const n) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch9))
  compiled-branch10
  (assign continue (label after-call11))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
  primitive-branch9
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  ; val now contains result of (- n 1)
  after-call11 
  (assign argl (op list) (reg val))
  ; restore factorial
  (restore proc)
  ;; apply factorial
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch12))
  compiled-branch13
  (assign continue (label after-call14))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
  primitive-branch12
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  ; val now contains result of (factorial (- n 1))
  after-call14
  ; restore partial arg-list for *
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  ; restore *
  (restore proc)
  (restore continue)
  ;; apply * and return its value
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch15))
  compiled-branch16
  ; tail-recursive call to a compound procedure
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
  primitive-branch15
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
  after-call17
  after-if5
  after-lambda2
  ;; assign the procedure to the variable factorial
  (perform (op define-variable!) (const factorial) (reg val) (reg env))
  (assign val (const ok)))
